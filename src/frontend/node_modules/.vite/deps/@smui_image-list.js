import {
  classAdderBuilder
} from "./chunk-KTG33W7L.js";
import {
  CommonLabel_default
} from "./chunk-OZJTW7SA.js";
import {
  classMap,
  forwardEventsBuilder,
  useActions
} from "./chunk-D34JIY7P.js";
import "./chunk-QKQJIKFJ.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  assign,
  binding_callbacks,
  children,
  claim_element,
  compute_rest_props,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_update,
  init,
  insert_hydration_dev,
  is_function,
  run_all,
  safe_not_equal,
  setContext,
  set_attributes,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-BJ76AV5Z.js";
import "./chunk-JC4IRQUL.js";

// node_modules/@smui/image-list/dist/ImageList.svelte
var file = "node_modules/@smui/image-list/dist/ImageList.svelte";
function create_fragment(ctx) {
  let ul;
  let ul_class_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[9].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[8], null);
  let ul_levels = [
    {
      class: ul_class_value = classMap({
        [ctx[1]]: true,
        "mdc-image-list": true,
        "mdc-image-list--masonry": ctx[2],
        "mdc-image-list--with-text-protection": ctx[3]
      })
    },
    ctx[6]
  ];
  let ul_data = {};
  for (let i = 0; i < ul_levels.length; i += 1) {
    ul_data = assign(ul_data, ul_levels[i]);
  }
  const block = {
    c: function create() {
      ul = element("ul");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      ul = claim_element(nodes, "UL", { class: true });
      var ul_nodes = children(ul);
      if (default_slot)
        default_slot.l(ul_nodes);
      ul_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(ul, ul_data);
      add_location(ul, file, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, ul, anchor);
      if (default_slot) {
        default_slot.m(ul, null);
      }
      ctx[10](ul);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(null, ul, ctx[0])),
          action_destroyer(forwardEvents_action = ctx[5].call(null, ul))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[8],
            !current ? get_all_dirty_from_scope(ctx2[8]) : get_slot_changes(default_slot_template, ctx2[8], dirty, null),
            null
          );
        }
      }
      set_attributes(ul, ul_data = get_spread_update(ul_levels, [
        (!current || dirty & 14 && ul_class_value !== (ul_class_value = classMap({
          [ctx2[1]]: true,
          "mdc-image-list": true,
          "mdc-image-list--masonry": ctx2[2],
          "mdc-image-list--with-text-protection": ctx2[3]
        }))) && { class: ul_class_value },
        dirty & 64 && ctx2[6]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & 1)
        useActions_action.update.call(null, ctx2[0]);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(ul);
      if (default_slot)
        default_slot.d(detaching);
      ctx[10](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "masonry", "withTextProtection", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ImageList", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { masonry = false } = $$props;
  let { withTextProtection = false } = $$props;
  let element2;
  setContext("SMUI:label:context", "image-list");
  function getElement() {
    return element2;
  }
  function ul_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(4, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("masonry" in $$new_props)
      $$invalidate(2, masonry = $$new_props.masonry);
    if ("withTextProtection" in $$new_props)
      $$invalidate(3, withTextProtection = $$new_props.withTextProtection);
    if ("$$scope" in $$new_props)
      $$invalidate(8, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    setContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    forwardEvents,
    use,
    className,
    masonry,
    withTextProtection,
    element: element2,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("masonry" in $$props)
      $$invalidate(2, masonry = $$new_props.masonry);
    if ("withTextProtection" in $$props)
      $$invalidate(3, withTextProtection = $$new_props.withTextProtection);
    if ("element" in $$props)
      $$invalidate(4, element2 = $$new_props.element);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    use,
    className,
    masonry,
    withTextProtection,
    element2,
    forwardEvents,
    $$restProps,
    getElement,
    $$scope,
    slots,
    ul_binding
  ];
}
var ImageList = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      use: 0,
      class: 1,
      masonry: 2,
      withTextProtection: 3,
      getElement: 7
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ImageList",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<ImageList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<ImageList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<ImageList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<ImageList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get masonry() {
    throw new Error("<ImageList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set masonry(value) {
    throw new Error("<ImageList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get withTextProtection() {
    throw new Error("<ImageList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set withTextProtection(value) {
    throw new Error("<ImageList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[7];
  }
  set getElement(value) {
    throw new Error("<ImageList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ImageList_default = ImageList;

// node_modules/@smui/image-list/dist/Item.js
var Item_default = classAdderBuilder({
  class: "mdc-image-list__item",
  tag: "li"
});

// node_modules/@smui/image-list/dist/ImageAspectContainer.js
var ImageAspectContainer_default = classAdderBuilder({
  class: "mdc-image-list__image-aspect-container",
  tag: "div"
});

// node_modules/@smui/image-list/dist/Image.js
var Image_default = classAdderBuilder({
  class: "mdc-image-list__image",
  tag: "img"
});

// node_modules/@smui/image-list/dist/Supporting.js
var Supporting_default = classAdderBuilder({
  class: "mdc-image-list__supporting",
  tag: "div"
});

// node_modules/@smui/image-list/dist/index.js
var dist_default = ImageList_default;
export {
  Image_default as Image,
  ImageAspectContainer_default as ImageAspectContainer,
  Item_default as Item,
  CommonLabel_default as Label,
  Supporting_default as Supporting,
  dist_default as default
};
//# sourceMappingURL=@smui_image-list.js.map
