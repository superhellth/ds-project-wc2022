import {
  MDCRipple,
  MDCRippleFoundation
} from "./chunk-G23XUBRR.js";
import {
  applyPassive
} from "./chunk-46WCSRWY.js";
import {
  matches
} from "./chunk-2AIYWHJH.js";
import {
  MDCComponent,
  MDCFoundation,
  __assign,
  __extends,
  __read,
  __spreadArray,
  __values
} from "./chunk-LNQ46MIJ.js";
import {
  __export
} from "./chunk-JC4IRQUL.js";

// node_modules/@material/switch/deprecated/index.js
var deprecated_exports = {};
__export(deprecated_exports, {
  MDCSwitch: () => MDCSwitch,
  MDCSwitchFoundation: () => MDCSwitchFoundation,
  cssClasses: () => cssClasses,
  strings: () => strings
});

// node_modules/@material/switch/deprecated/constants.js
var cssClasses = {
  CHECKED: "mdc-switch--checked",
  DISABLED: "mdc-switch--disabled"
};
var strings = {
  ARIA_CHECKED_ATTR: "aria-checked",
  NATIVE_CONTROL_SELECTOR: ".mdc-switch__native-control",
  RIPPLE_SURFACE_SELECTOR: ".mdc-switch__thumb-underlay"
};

// node_modules/@material/switch/deprecated/foundation.js
var MDCSwitchFoundation = function(_super) {
  __extends(MDCSwitchFoundation3, _super);
  function MDCSwitchFoundation3(adapter) {
    return _super.call(this, __assign(__assign({}, MDCSwitchFoundation3.defaultAdapter), adapter)) || this;
  }
  Object.defineProperty(MDCSwitchFoundation3, "strings", {
    get: function() {
      return strings;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCSwitchFoundation3, "cssClasses", {
    get: function() {
      return cssClasses;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCSwitchFoundation3, "defaultAdapter", {
    get: function() {
      return {
        addClass: function() {
          return void 0;
        },
        removeClass: function() {
          return void 0;
        },
        setNativeControlChecked: function() {
          return void 0;
        },
        setNativeControlDisabled: function() {
          return void 0;
        },
        setNativeControlAttr: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCSwitchFoundation3.prototype.setChecked = function(checked) {
    this.adapter.setNativeControlChecked(checked);
    this.updateAriaChecked(checked);
    this.updateCheckedStyling(checked);
  };
  MDCSwitchFoundation3.prototype.setDisabled = function(disabled) {
    this.adapter.setNativeControlDisabled(disabled);
    if (disabled) {
      this.adapter.addClass(cssClasses.DISABLED);
    } else {
      this.adapter.removeClass(cssClasses.DISABLED);
    }
  };
  MDCSwitchFoundation3.prototype.handleChange = function(evt) {
    var nativeControl = evt.target;
    this.updateAriaChecked(nativeControl.checked);
    this.updateCheckedStyling(nativeControl.checked);
  };
  MDCSwitchFoundation3.prototype.updateCheckedStyling = function(checked) {
    if (checked) {
      this.adapter.addClass(cssClasses.CHECKED);
    } else {
      this.adapter.removeClass(cssClasses.CHECKED);
    }
  };
  MDCSwitchFoundation3.prototype.updateAriaChecked = function(checked) {
    this.adapter.setNativeControlAttr(strings.ARIA_CHECKED_ATTR, "" + !!checked);
  };
  return MDCSwitchFoundation3;
}(MDCFoundation);

// node_modules/@material/switch/deprecated/component.js
var MDCSwitch = function(_super) {
  __extends(MDCSwitch3, _super);
  function MDCSwitch3() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.rippleSurface = _this.createRipple();
    return _this;
  }
  MDCSwitch3.attachTo = function(root) {
    return new MDCSwitch3(root);
  };
  MDCSwitch3.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
    this.rippleSurface.destroy();
    this.nativeControl.removeEventListener("change", this.changeHandler);
  };
  MDCSwitch3.prototype.initialSyncWithDOM = function() {
    var _this = this;
    this.changeHandler = function() {
      var _a;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      (_a = _this.foundation).handleChange.apply(_a, __spreadArray([], __read(args)));
    };
    this.nativeControl.addEventListener("change", this.changeHandler);
    this.checked = this.checked;
  };
  MDCSwitch3.prototype.getDefaultFoundation = function() {
    var _this = this;
    var adapter = {
      addClass: function(className) {
        return _this.root.classList.add(className);
      },
      removeClass: function(className) {
        return _this.root.classList.remove(className);
      },
      setNativeControlChecked: function(checked) {
        return _this.nativeControl.checked = checked;
      },
      setNativeControlDisabled: function(disabled) {
        return _this.nativeControl.disabled = disabled;
      },
      setNativeControlAttr: function(attr, value) {
        _this.nativeControl.setAttribute(attr, value);
      }
    };
    return new MDCSwitchFoundation(adapter);
  };
  Object.defineProperty(MDCSwitch3.prototype, "ripple", {
    get: function() {
      return this.rippleSurface;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCSwitch3.prototype, "checked", {
    get: function() {
      return this.nativeControl.checked;
    },
    set: function(checked) {
      this.foundation.setChecked(checked);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCSwitch3.prototype, "disabled", {
    get: function() {
      return this.nativeControl.disabled;
    },
    set: function(disabled) {
      this.foundation.setDisabled(disabled);
    },
    enumerable: false,
    configurable: true
  });
  MDCSwitch3.prototype.createRipple = function() {
    var _this = this;
    var RIPPLE_SURFACE_SELECTOR = MDCSwitchFoundation.strings.RIPPLE_SURFACE_SELECTOR;
    var rippleSurface = this.root.querySelector(RIPPLE_SURFACE_SELECTOR);
    var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { addClass: function(className) {
      return rippleSurface.classList.add(className);
    }, computeBoundingRect: function() {
      return rippleSurface.getBoundingClientRect();
    }, deregisterInteractionHandler: function(evtType, handler) {
      _this.nativeControl.removeEventListener(evtType, handler, applyPassive());
    }, isSurfaceActive: function() {
      return matches(_this.nativeControl, ":active");
    }, isUnbounded: function() {
      return true;
    }, registerInteractionHandler: function(evtType, handler) {
      _this.nativeControl.addEventListener(evtType, handler, applyPassive());
    }, removeClass: function(className) {
      rippleSurface.classList.remove(className);
    }, updateCssVariable: function(varName, value) {
      rippleSurface.style.setProperty(varName, value);
    } });
    return new MDCRipple(this.root, new MDCRippleFoundation(adapter));
  };
  Object.defineProperty(MDCSwitch3.prototype, "nativeControl", {
    get: function() {
      var NATIVE_CONTROL_SELECTOR = MDCSwitchFoundation.strings.NATIVE_CONTROL_SELECTOR;
      return this.root.querySelector(NATIVE_CONTROL_SELECTOR);
    },
    enumerable: false,
    configurable: true
  });
  return MDCSwitch3;
}(MDCComponent);

// node_modules/@material/switch/constants.js
var CssClasses;
(function(CssClasses2) {
  CssClasses2["PROCESSING"] = "mdc-switch--processing";
  CssClasses2["SELECTED"] = "mdc-switch--selected";
  CssClasses2["UNSELECTED"] = "mdc-switch--unselected";
})(CssClasses || (CssClasses = {}));
var Selectors;
(function(Selectors2) {
  Selectors2["RIPPLE"] = ".mdc-switch__ripple";
})(Selectors || (Selectors = {}));

// node_modules/@material/base/observer.js
function observeProperty(target, property, observer) {
  var targetObservers = installObserver(target, property);
  var observers = targetObservers.getObservers(property);
  observers.push(observer);
  return function() {
    observers.splice(observers.indexOf(observer), 1);
  };
}
var allTargetObservers = /* @__PURE__ */ new WeakMap();
function installObserver(target, property) {
  var observersMap = /* @__PURE__ */ new Map();
  if (!allTargetObservers.has(target)) {
    allTargetObservers.set(target, {
      isEnabled: true,
      getObservers: function(key) {
        var observers = observersMap.get(key) || [];
        if (!observersMap.has(key)) {
          observersMap.set(key, observers);
        }
        return observers;
      },
      installedProperties: /* @__PURE__ */ new Set()
    });
  }
  var targetObservers = allTargetObservers.get(target);
  if (targetObservers.installedProperties.has(property)) {
    return targetObservers;
  }
  var descriptor = getDescriptor(target, property) || {
    configurable: true,
    enumerable: true,
    value: target[property],
    writable: true
  };
  var observedDescriptor = __assign({}, descriptor);
  var descGet = descriptor.get, descSet = descriptor.set;
  if ("value" in descriptor) {
    delete observedDescriptor.value;
    delete observedDescriptor.writable;
    var value_1 = descriptor.value;
    descGet = function() {
      return value_1;
    };
    if (descriptor.writable) {
      descSet = function(newValue) {
        value_1 = newValue;
      };
    }
  }
  if (descGet) {
    observedDescriptor.get = function() {
      return descGet.call(this);
    };
  }
  if (descSet) {
    observedDescriptor.set = function(newValue) {
      var e_4, _a;
      var previous = descGet ? descGet.call(this) : newValue;
      descSet.call(this, newValue);
      if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {
        try {
          for (var _b = __values(targetObservers.getObservers(property)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer(newValue, previous);
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
      }
    };
  }
  targetObservers.installedProperties.add(property);
  Object.defineProperty(target, property, observedDescriptor);
  return targetObservers;
}
function getDescriptor(target, property) {
  var descriptorTarget = target;
  var descriptor;
  while (descriptorTarget) {
    descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);
    if (descriptor) {
      break;
    }
    descriptorTarget = Object.getPrototypeOf(descriptorTarget);
  }
  return descriptor;
}
function setObserversEnabled(target, enabled) {
  var targetObservers = allTargetObservers.get(target);
  if (targetObservers) {
    targetObservers.isEnabled = enabled;
  }
}

// node_modules/@material/base/observer-foundation.js
var MDCObserverFoundation = function(_super) {
  __extends(MDCObserverFoundation2, _super);
  function MDCObserverFoundation2(adapter) {
    var _this = _super.call(this, adapter) || this;
    _this.unobserves = /* @__PURE__ */ new Set();
    return _this;
  }
  MDCObserverFoundation2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
    this.unobserve();
  };
  MDCObserverFoundation2.prototype.observe = function(target, observers) {
    var e_1, _a;
    var _this = this;
    var cleanup = [];
    try {
      for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var property = _c.value;
        var observer = observers[property].bind(this);
        cleanup.push(this.observeProperty(target, property, observer));
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    var unobserve = function() {
      var e_2, _a2;
      try {
        for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
          var cleanupFn = cleanup_1_1.value;
          cleanupFn();
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (cleanup_1_1 && !cleanup_1_1.done && (_a2 = cleanup_1.return))
            _a2.call(cleanup_1);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      _this.unobserves.delete(unobserve);
    };
    this.unobserves.add(unobserve);
    return unobserve;
  };
  MDCObserverFoundation2.prototype.observeProperty = function(target, property, observer) {
    return observeProperty(target, property, observer);
  };
  MDCObserverFoundation2.prototype.setObserversEnabled = function(target, enabled) {
    setObserversEnabled(target, enabled);
  };
  MDCObserverFoundation2.prototype.unobserve = function() {
    var e_3, _a;
    try {
      for (var _b = __values(__spreadArray([], __read(this.unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {
        var unobserve = _c.value;
        unobserve();
      }
    } catch (e_3_1) {
      e_3 = { error: e_3_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_3)
          throw e_3.error;
      }
    }
  };
  return MDCObserverFoundation2;
}(MDCFoundation);

// node_modules/@material/switch/foundation.js
var MDCSwitchFoundation2 = function(_super) {
  __extends(MDCSwitchFoundation3, _super);
  function MDCSwitchFoundation3(adapter) {
    var _this = _super.call(this, adapter) || this;
    _this.handleClick = _this.handleClick.bind(_this);
    return _this;
  }
  MDCSwitchFoundation3.prototype.init = function() {
    this.observe(this.adapter.state, {
      disabled: this.stopProcessingIfDisabled,
      processing: this.stopProcessingIfDisabled
    });
  };
  MDCSwitchFoundation3.prototype.handleClick = function() {
    if (this.adapter.state.disabled) {
      return;
    }
    this.adapter.state.selected = !this.adapter.state.selected;
  };
  MDCSwitchFoundation3.prototype.stopProcessingIfDisabled = function() {
    if (this.adapter.state.disabled) {
      this.adapter.state.processing = false;
    }
  };
  return MDCSwitchFoundation3;
}(MDCObserverFoundation);
var MDCSwitchRenderFoundation = function(_super) {
  __extends(MDCSwitchRenderFoundation2, _super);
  function MDCSwitchRenderFoundation2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MDCSwitchRenderFoundation2.prototype.init = function() {
    _super.prototype.init.call(this);
    this.observe(this.adapter.state, {
      disabled: this.onDisabledChange,
      processing: this.onProcessingChange,
      selected: this.onSelectedChange
    });
  };
  MDCSwitchRenderFoundation2.prototype.initFromDOM = function() {
    this.setObserversEnabled(this.adapter.state, false);
    this.adapter.state.selected = this.adapter.hasClass(CssClasses.SELECTED);
    this.onSelectedChange();
    this.adapter.state.disabled = this.adapter.isDisabled();
    this.adapter.state.processing = this.adapter.hasClass(CssClasses.PROCESSING);
    this.setObserversEnabled(this.adapter.state, true);
    this.stopProcessingIfDisabled();
  };
  MDCSwitchRenderFoundation2.prototype.onDisabledChange = function() {
    this.adapter.setDisabled(this.adapter.state.disabled);
  };
  MDCSwitchRenderFoundation2.prototype.onProcessingChange = function() {
    this.toggleClass(this.adapter.state.processing, CssClasses.PROCESSING);
  };
  MDCSwitchRenderFoundation2.prototype.onSelectedChange = function() {
    this.adapter.setAriaChecked(String(this.adapter.state.selected));
    this.toggleClass(this.adapter.state.selected, CssClasses.SELECTED);
    this.toggleClass(!this.adapter.state.selected, CssClasses.UNSELECTED);
  };
  MDCSwitchRenderFoundation2.prototype.toggleClass = function(addClass, className) {
    if (addClass) {
      this.adapter.addClass(className);
    } else {
      this.adapter.removeClass(className);
    }
  };
  return MDCSwitchRenderFoundation2;
}(MDCSwitchFoundation2);

// node_modules/@material/switch/component.js
var MDCSwitch2 = function(_super) {
  __extends(MDCSwitch3, _super);
  function MDCSwitch3(root, foundation) {
    var _this = _super.call(this, root, foundation) || this;
    _this.root = root;
    return _this;
  }
  MDCSwitch3.attachTo = function(root) {
    return new MDCSwitch3(root);
  };
  MDCSwitch3.prototype.initialize = function() {
    this.ripple = new MDCRipple(this.root, this.createRippleFoundation());
  };
  MDCSwitch3.prototype.initialSyncWithDOM = function() {
    var rippleElement = this.root.querySelector(Selectors.RIPPLE);
    if (!rippleElement) {
      throw new Error("Switch " + Selectors.RIPPLE + " element is required.");
    }
    this.rippleElement = rippleElement;
    this.root.addEventListener("click", this.foundation.handleClick);
    this.foundation.initFromDOM();
  };
  MDCSwitch3.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
    this.ripple.destroy();
    this.root.removeEventListener("click", this.foundation.handleClick);
  };
  MDCSwitch3.prototype.getDefaultFoundation = function() {
    return new MDCSwitchRenderFoundation(this.createAdapter());
  };
  MDCSwitch3.prototype.createAdapter = function() {
    var _this = this;
    return {
      addClass: function(className) {
        _this.root.classList.add(className);
      },
      hasClass: function(className) {
        return _this.root.classList.contains(className);
      },
      isDisabled: function() {
        return _this.root.disabled;
      },
      removeClass: function(className) {
        _this.root.classList.remove(className);
      },
      setAriaChecked: function(ariaChecked) {
        return _this.root.setAttribute("aria-checked", ariaChecked);
      },
      setDisabled: function(disabled) {
        _this.root.disabled = disabled;
      },
      state: this
    };
  };
  MDCSwitch3.prototype.createRippleFoundation = function() {
    return new MDCRippleFoundation(this.createRippleAdapter());
  };
  MDCSwitch3.prototype.createRippleAdapter = function() {
    var _this = this;
    return __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function() {
      return _this.rippleElement.getBoundingClientRect();
    }, isUnbounded: function() {
      return true;
    } });
  };
  return MDCSwitch3;
}(MDCComponent);

export {
  deprecated_exports,
  CssClasses,
  Selectors,
  MDCSwitchFoundation2 as MDCSwitchFoundation,
  MDCSwitchRenderFoundation,
  MDCSwitch2 as MDCSwitch
};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
//# sourceMappingURL=chunk-EUDSUHOX.js.map
