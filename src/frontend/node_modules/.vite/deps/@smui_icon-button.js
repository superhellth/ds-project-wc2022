import {
  dist_default
} from "./chunk-4L4YAOOP.js";
import {
  CommonIcon_default,
  SmuiElement_default
} from "./chunk-3MPPCYGF.js";
import {
  classMap,
  dispatch,
  forwardEventsBuilder
} from "./chunk-YHC6BTE4.js";
import {
  MDCIconButtonToggleFoundation
} from "./chunk-PNMBY6GU.js";
import "./chunk-LVKEPJPU.js";
import "./chunk-WSTZOV6I.js";
import "./chunk-G23XUBRR.js";
import "./chunk-46WCSRWY.js";
import "./chunk-2AIYWHJH.js";
import "./chunk-QKQJIKFJ.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  assign,
  attr_dev,
  binding_callbacks,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  compute_rest_props,
  construct_svelte_component_dev,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  group_outros,
  init,
  insert_hydration_dev,
  mount_component,
  onDestroy,
  safe_not_equal,
  setContext,
  space,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-BJ76AV5Z.js";
import "./chunk-LNQ46MIJ.js";
import "./chunk-JC4IRQUL.js";

// node_modules/@smui/icon-button/dist/IconButton.svelte
var file = "node_modules\\@smui\\icon-button\\dist\\IconButton.svelte";
function create_if_block(ctx) {
  let div;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "mdc-icon-button__touch");
      add_location(div, file, 64, 21, 2059);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(65:10) {#if touch}",
    ctx
  });
  return block;
}
function create_default_slot(ctx) {
  let div;
  let t;
  let if_block_anchor;
  let current;
  const default_slot_template = ctx[33].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[37], null);
  let if_block = ctx[8] && create_if_block(ctx);
  const block = {
    c: function create() {
      div = element("div");
      t = space();
      if (default_slot)
        default_slot.c();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      t = claim_space(nodes);
      if (default_slot)
        default_slot.l(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "mdc-icon-button__ripple");
      add_location(div, file, 63, 3, 1998);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      insert_hydration_dev(target, t, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[1] & 64)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[37],
            !current ? get_all_dirty_from_scope(ctx2[37]) : get_slot_changes(default_slot_template, ctx2[37], dirty, null),
            null
          );
        }
      }
      if (ctx2[8]) {
        if (if_block) {
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      if (detaching)
        detach_dev(t);
      if (default_slot)
        default_slot.d(detaching);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: true,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-icon-button': true,     'mdc-icon-button--on': !isUninitializedValue(pressed) && pressed,     'mdc-icon-button--touch': touch,     'mdc-icon-button--display-flex': displayFlex,     'smui-icon-button--size-button': size === 'button',     'smui-icon-button--size-mini': size === 'mini',     'mdc-icon-button--reduced-size': size === 'mini' || size === 'button',     'mdc-card__action': context === 'card:action',     'mdc-card__action--icon': context === 'card:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__dismiss': context === 'snackbar:actions',     'mdc-data-table__pagination-button': context === 'data-table:pagination',     'mdc-data-table__sort-icon-button':       context === 'data-table:sortable-header-cell',     'mdc-dialog__close':       (context === 'dialog:header' || context === 'dialog:sheet') &&       action === 'close',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   aria-pressed={!isUninitializedValue(pressed)     ? pressed       ? 'true'       : 'false'     : null}   aria-label={pressed ? ariaLabelOn : ariaLabelOff}   data-aria-label-on={ariaLabelOn}   data-aria-label-off={ariaLabelOff}   aria-describedby={ariaDescribedby}   on:click={() => instance && instance.handleClick()}   on:click={() =>     context === 'top-app-bar:navigation' &&     dispatch(getElement(), 'SMUITopAppBarIconButton:nav')}   {href}   {...actionProp}   {...internalAttrs}   {...$$restProps}   >",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
    { tag: ctx[14] },
    {
      use: [
        [
          dist_default,
          {
            ripple: ctx[4],
            unbounded: true,
            color: ctx[5],
            disabled: !!ctx[29].disabled,
            addClass: ctx[26],
            removeClass: ctx[27],
            addStyle: ctx[28]
          }
        ],
        ctx[22],
        ...ctx[1]
      ]
    },
    {
      class: classMap({
        [ctx[2]]: true,
        "mdc-icon-button": true,
        "mdc-icon-button--on": !ctx[23](ctx[0]) && ctx[0],
        "mdc-icon-button--touch": ctx[8],
        "mdc-icon-button--display-flex": ctx[9],
        "smui-icon-button--size-button": ctx[10] === "button",
        "smui-icon-button--size-mini": ctx[10] === "mini",
        "mdc-icon-button--reduced-size": ctx[10] === "mini" || ctx[10] === "button",
        "mdc-card__action": ctx[24] === "card:action",
        "mdc-card__action--icon": ctx[24] === "card:action",
        "mdc-top-app-bar__navigation-icon": ctx[24] === "top-app-bar:navigation",
        "mdc-top-app-bar__action-item": ctx[24] === "top-app-bar:action",
        "mdc-snackbar__dismiss": ctx[24] === "snackbar:actions",
        "mdc-data-table__pagination-button": ctx[24] === "data-table:pagination",
        "mdc-data-table__sort-icon-button": ctx[24] === "data-table:sortable-header-cell",
        "mdc-dialog__close": (ctx[24] === "dialog:header" || ctx[24] === "dialog:sheet") && ctx[12] === "close",
        ...ctx[18]
      })
    },
    {
      style: Object.entries(ctx[19]).map(func).concat([ctx[3]]).join(" ")
    },
    {
      "aria-pressed": !ctx[23](ctx[0]) ? ctx[0] ? "true" : "false" : null
    },
    {
      "aria-label": ctx[0] ? ctx[6] : ctx[7]
    },
    {
      "data-aria-label-on": ctx[6]
    },
    {
      "data-aria-label-off": ctx[7]
    },
    {
      "aria-describedby": ctx[25]
    },
    { href: ctx[11] },
    ctx[21],
    ctx[20],
    ctx[29]
  ];
  var switch_value = ctx[13];
  function switch_props(ctx2) {
    let switch_instance_props = {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx: ctx2 }
    };
    for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
      switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    }
    return {
      props: switch_instance_props,
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    ctx[34](switch_instance);
    switch_instance.$on("click", ctx[35]);
    switch_instance.$on("click", ctx[36]);
  }
  const block = {
    c: function create() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l: function claim(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const switch_instance_changes = dirty[0] & 1073504255 ? get_spread_update(switch_instance_spread_levels, [
        dirty[0] & 16384 && { tag: ctx2[14] },
        dirty[0] & 1010827314 && {
          use: [
            [
              dist_default,
              {
                ripple: ctx2[4],
                unbounded: true,
                color: ctx2[5],
                disabled: !!ctx2[29].disabled,
                addClass: ctx2[26],
                removeClass: ctx2[27],
                addStyle: ctx2[28]
              }
            ],
            ctx2[22],
            ...ctx2[1]
          ]
        },
        dirty[0] & 25433861 && {
          class: classMap({
            [ctx2[2]]: true,
            "mdc-icon-button": true,
            "mdc-icon-button--on": !ctx2[23](ctx2[0]) && ctx2[0],
            "mdc-icon-button--touch": ctx2[8],
            "mdc-icon-button--display-flex": ctx2[9],
            "smui-icon-button--size-button": ctx2[10] === "button",
            "smui-icon-button--size-mini": ctx2[10] === "mini",
            "mdc-icon-button--reduced-size": ctx2[10] === "mini" || ctx2[10] === "button",
            "mdc-card__action": ctx2[24] === "card:action",
            "mdc-card__action--icon": ctx2[24] === "card:action",
            "mdc-top-app-bar__navigation-icon": ctx2[24] === "top-app-bar:navigation",
            "mdc-top-app-bar__action-item": ctx2[24] === "top-app-bar:action",
            "mdc-snackbar__dismiss": ctx2[24] === "snackbar:actions",
            "mdc-data-table__pagination-button": ctx2[24] === "data-table:pagination",
            "mdc-data-table__sort-icon-button": ctx2[24] === "data-table:sortable-header-cell",
            "mdc-dialog__close": (ctx2[24] === "dialog:header" || ctx2[24] === "dialog:sheet") && ctx2[12] === "close",
            ...ctx2[18]
          })
        },
        dirty[0] & 524296 && {
          style: Object.entries(ctx2[19]).map(func).concat([ctx2[3]]).join(" ")
        },
        dirty[0] & 8388609 && {
          "aria-pressed": !ctx2[23](ctx2[0]) ? ctx2[0] ? "true" : "false" : null
        },
        dirty[0] & 193 && {
          "aria-label": ctx2[0] ? ctx2[6] : ctx2[7]
        },
        dirty[0] & 64 && {
          "data-aria-label-on": ctx2[6]
        },
        dirty[0] & 128 && {
          "data-aria-label-off": ctx2[7]
        },
        dirty[0] & 33554432 && {
          "aria-describedby": ctx2[25]
        },
        dirty[0] & 2048 && { href: ctx2[11] },
        dirty[0] & 2097152 && get_spread_object(ctx2[21]),
        dirty[0] & 1048576 && get_spread_object(ctx2[20]),
        dirty[0] & 536870912 && get_spread_object(ctx2[29])
      ]) : {};
      if (dirty[0] & 256 | dirty[1] & 64) {
        switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (switch_value !== (switch_value = ctx2[13])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx2));
          ctx2[34](switch_instance);
          switch_instance.$on("click", ctx2[35]);
          switch_instance.$on("click", ctx2[36]);
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[34](null);
      if (detaching)
        detach_dev(switch_instance_anchor);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var func = ([name, value]) => `${name}: ${value};`;
function instance_1($$self, $$props, $$invalidate) {
  let actionProp;
  const omit_props_names = [
    "use",
    "class",
    "style",
    "ripple",
    "color",
    "toggle",
    "pressed",
    "ariaLabelOn",
    "ariaLabelOff",
    "touch",
    "displayFlex",
    "size",
    "href",
    "action",
    "component",
    "tag",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("IconButton", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let uninitializedValue = () => {
  };
  function isUninitializedValue(value) {
    return value === uninitializedValue;
  }
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { ripple = true } = $$props;
  let { color = void 0 } = $$props;
  let { toggle = false } = $$props;
  let { pressed = uninitializedValue } = $$props;
  let { ariaLabelOn = void 0 } = $$props;
  let { ariaLabelOff = void 0 } = $$props;
  let { touch = false } = $$props;
  let { displayFlex = true } = $$props;
  let { size = "normal" } = $$props;
  let { href = void 0 } = $$props;
  let { action = void 0 } = $$props;
  let element2;
  let instance;
  let internalClasses = {};
  let internalStyles = {};
  let internalAttrs = {};
  let context = getContext("SMUI:icon-button:context");
  let ariaDescribedby = getContext("SMUI:icon-button:aria-describedby");
  let { component = SmuiElement_default } = $$props;
  let { tag = component === SmuiElement_default ? href == null ? "button" : "a" : void 0 } = $$props;
  let previousDisabled = $$restProps.disabled;
  setContext("SMUI:icon:context", "icon-button");
  let oldToggle = null;
  onDestroy(() => {
    instance && instance.destroy();
  });
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(18, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(18, internalClasses[className2] = false, internalClasses);
    }
  }
  function addStyle(name, value) {
    if (internalStyles[name] != value) {
      if (value === "" || value == null) {
        delete internalStyles[name];
        $$invalidate(19, internalStyles);
      } else {
        $$invalidate(19, internalStyles[name] = value, internalStyles);
      }
    }
  }
  function getAttr(name) {
    var _a;
    return name in internalAttrs ? (_a = internalAttrs[name]) !== null && _a !== void 0 ? _a : null : getElement().getAttribute(name);
  }
  function addAttr(name, value) {
    if (internalAttrs[name] !== value) {
      $$invalidate(20, internalAttrs[name] = value, internalAttrs);
    }
  }
  function handleChange(evtData) {
    $$invalidate(0, pressed = evtData.isOn);
  }
  function getElement() {
    return element2.getElement();
  }
  function switch_instance_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(16, element2);
    });
  }
  const click_handler = () => instance && instance.handleClick();
  const click_handler_1 = () => context === "top-app-bar:navigation" && dispatch(getElement(), "SMUITopAppBarIconButton:nav");
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(29, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(1, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(2, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(3, style = $$new_props.style);
    if ("ripple" in $$new_props)
      $$invalidate(4, ripple = $$new_props.ripple);
    if ("color" in $$new_props)
      $$invalidate(5, color = $$new_props.color);
    if ("toggle" in $$new_props)
      $$invalidate(30, toggle = $$new_props.toggle);
    if ("pressed" in $$new_props)
      $$invalidate(0, pressed = $$new_props.pressed);
    if ("ariaLabelOn" in $$new_props)
      $$invalidate(6, ariaLabelOn = $$new_props.ariaLabelOn);
    if ("ariaLabelOff" in $$new_props)
      $$invalidate(7, ariaLabelOff = $$new_props.ariaLabelOff);
    if ("touch" in $$new_props)
      $$invalidate(8, touch = $$new_props.touch);
    if ("displayFlex" in $$new_props)
      $$invalidate(9, displayFlex = $$new_props.displayFlex);
    if ("size" in $$new_props)
      $$invalidate(10, size = $$new_props.size);
    if ("href" in $$new_props)
      $$invalidate(11, href = $$new_props.href);
    if ("action" in $$new_props)
      $$invalidate(12, action = $$new_props.action);
    if ("component" in $$new_props)
      $$invalidate(13, component = $$new_props.component);
    if ("tag" in $$new_props)
      $$invalidate(14, tag = $$new_props.tag);
    if ("$$scope" in $$new_props)
      $$invalidate(37, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    MDCIconButtonToggleFoundation,
    onDestroy,
    getContext,
    setContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    dispatch,
    Ripple: dist_default,
    SmuiElement: SmuiElement_default,
    forwardEvents,
    uninitializedValue,
    isUninitializedValue,
    use,
    className,
    style,
    ripple,
    color,
    toggle,
    pressed,
    ariaLabelOn,
    ariaLabelOff,
    touch,
    displayFlex,
    size,
    href,
    action,
    element: element2,
    instance,
    internalClasses,
    internalStyles,
    internalAttrs,
    context,
    ariaDescribedby,
    component,
    tag,
    previousDisabled,
    oldToggle,
    hasClass,
    addClass,
    removeClass,
    addStyle,
    getAttr,
    addAttr,
    handleChange,
    getElement,
    actionProp
  });
  $$self.$inject_state = ($$new_props) => {
    if ("uninitializedValue" in $$props)
      uninitializedValue = $$new_props.uninitializedValue;
    if ("use" in $$props)
      $$invalidate(1, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(2, className = $$new_props.className);
    if ("style" in $$props)
      $$invalidate(3, style = $$new_props.style);
    if ("ripple" in $$props)
      $$invalidate(4, ripple = $$new_props.ripple);
    if ("color" in $$props)
      $$invalidate(5, color = $$new_props.color);
    if ("toggle" in $$props)
      $$invalidate(30, toggle = $$new_props.toggle);
    if ("pressed" in $$props)
      $$invalidate(0, pressed = $$new_props.pressed);
    if ("ariaLabelOn" in $$props)
      $$invalidate(6, ariaLabelOn = $$new_props.ariaLabelOn);
    if ("ariaLabelOff" in $$props)
      $$invalidate(7, ariaLabelOff = $$new_props.ariaLabelOff);
    if ("touch" in $$props)
      $$invalidate(8, touch = $$new_props.touch);
    if ("displayFlex" in $$props)
      $$invalidate(9, displayFlex = $$new_props.displayFlex);
    if ("size" in $$props)
      $$invalidate(10, size = $$new_props.size);
    if ("href" in $$props)
      $$invalidate(11, href = $$new_props.href);
    if ("action" in $$props)
      $$invalidate(12, action = $$new_props.action);
    if ("element" in $$props)
      $$invalidate(16, element2 = $$new_props.element);
    if ("instance" in $$props)
      $$invalidate(17, instance = $$new_props.instance);
    if ("internalClasses" in $$props)
      $$invalidate(18, internalClasses = $$new_props.internalClasses);
    if ("internalStyles" in $$props)
      $$invalidate(19, internalStyles = $$new_props.internalStyles);
    if ("internalAttrs" in $$props)
      $$invalidate(20, internalAttrs = $$new_props.internalAttrs);
    if ("context" in $$props)
      $$invalidate(24, context = $$new_props.context);
    if ("ariaDescribedby" in $$props)
      $$invalidate(25, ariaDescribedby = $$new_props.ariaDescribedby);
    if ("component" in $$props)
      $$invalidate(13, component = $$new_props.component);
    if ("tag" in $$props)
      $$invalidate(14, tag = $$new_props.tag);
    if ("previousDisabled" in $$props)
      $$invalidate(31, previousDisabled = $$new_props.previousDisabled);
    if ("oldToggle" in $$props)
      $$invalidate(32, oldToggle = $$new_props.oldToggle);
    if ("actionProp" in $$props)
      $$invalidate(21, actionProp = $$new_props.actionProp);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & 4096) {
      $:
        $$invalidate(21, actionProp = (() => {
          if (context === "data-table:pagination") {
            switch (action) {
              case "first-page":
                return { "data-first-page": "true" };
              case "prev-page":
                return { "data-prev-page": "true" };
              case "next-page":
                return { "data-next-page": "true" };
              case "last-page":
                return { "data-last-page": "true" };
              default:
                return { "data-action": "true" };
            }
          } else if (context === "dialog:header" || context === "dialog:sheet") {
            return { "data-mdc-dialog-action": action };
          } else {
            return { action };
          }
        })());
    }
    $:
      if (previousDisabled !== $$restProps.disabled) {
        const elem = getElement();
        if ("blur" in elem) {
          elem.blur();
        }
        $$invalidate(31, previousDisabled = $$restProps.disabled);
      }
    if ($$self.$$.dirty[0] & 1073938432 | $$self.$$.dirty[1] & 2) {
      $:
        if (element2 && getElement() && toggle !== oldToggle) {
          if (toggle && !instance) {
            $$invalidate(17, instance = new MDCIconButtonToggleFoundation({
              addClass,
              hasClass,
              notifyChange: (evtData) => {
                handleChange(evtData);
                dispatch(getElement(), "SMUIIconButtonToggle:change", evtData, void 0, true);
              },
              removeClass,
              getAttr,
              setAttr: addAttr
            }));
            instance.init();
          } else if (!toggle && instance) {
            instance.destroy();
            $$invalidate(17, instance = void 0);
            $$invalidate(18, internalClasses = {});
            $$invalidate(20, internalAttrs = {});
          }
          $$invalidate(32, oldToggle = toggle);
        }
    }
    if ($$self.$$.dirty[0] & 131073) {
      $:
        if (instance && !isUninitializedValue(pressed) && instance.isOn() !== pressed) {
          instance.toggle(pressed);
        }
    }
  };
  return [
    pressed,
    use,
    className,
    style,
    ripple,
    color,
    ariaLabelOn,
    ariaLabelOff,
    touch,
    displayFlex,
    size,
    href,
    action,
    component,
    tag,
    getElement,
    element2,
    instance,
    internalClasses,
    internalStyles,
    internalAttrs,
    actionProp,
    forwardEvents,
    isUninitializedValue,
    context,
    ariaDescribedby,
    addClass,
    removeClass,
    addStyle,
    $$restProps,
    toggle,
    previousDisabled,
    oldToggle,
    slots,
    switch_instance_binding,
    click_handler,
    click_handler_1,
    $$scope
  ];
}
var IconButton = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance_1,
      create_fragment,
      safe_not_equal,
      {
        use: 1,
        class: 2,
        style: 3,
        ripple: 4,
        color: 5,
        toggle: 30,
        pressed: 0,
        ariaLabelOn: 6,
        ariaLabelOff: 7,
        touch: 8,
        displayFlex: 9,
        size: 10,
        href: 11,
        action: 12,
        component: 13,
        tag: 14,
        getElement: 15
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "IconButton",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get style() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set style(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ripple() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ripple(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get toggle() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set toggle(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pressed() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set pressed(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ariaLabelOn() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ariaLabelOn(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ariaLabelOff() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ariaLabelOff(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get touch() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set touch(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get displayFlex() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set displayFlex(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get size() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set size(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get href() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set href(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get action() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set action(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get component() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set component(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get tag() {
    throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set tag(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[15];
  }
  set getElement(value) {
    throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var IconButton_default = IconButton;

// node_modules/@smui/icon-button/dist/index.js
var dist_default2 = IconButton_default;
export {
  CommonIcon_default as Icon,
  dist_default2 as default
};
//# sourceMappingURL=@smui_icon-button.js.map
