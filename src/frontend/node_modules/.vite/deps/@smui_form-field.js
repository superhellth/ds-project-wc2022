import {
  classMap,
  exclude,
  forwardEventsBuilder,
  prefixFilter,
  useActions
} from "./chunk-YHC6BTE4.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  append_hydration_dev,
  assign,
  binding_callbacks,
  children,
  claim_element,
  claim_space,
  compute_rest_props,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_update,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  onMount,
  run_all,
  safe_not_equal,
  setContext,
  set_attributes,
  space,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-BJ76AV5Z.js";
import {
  MDCFormFieldFoundation
} from "./chunk-NZJZPDIC.js";
import "./chunk-LNQ46MIJ.js";
import "./chunk-JC4IRQUL.js";

// node_modules/@smui/form-field/dist/FormField.svelte
var file = "node_modules\\@smui\\form-field\\dist\\FormField.svelte";
var get_label_slot_changes = (dirty) => ({});
var get_label_slot_context = (ctx) => ({});
function create_fragment(ctx) {
  let div;
  let t;
  let label_1;
  let useActions_action;
  let div_class_value;
  let useActions_action_1;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[13].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[12], null);
  const label_slot_template = ctx[13].label;
  const label_slot = create_slot(label_slot_template, ctx, ctx[12], get_label_slot_context);
  let label_1_levels = [{ for: ctx[4] }, prefixFilter(ctx[10], "label$")];
  let label_1_data = {};
  for (let i = 0; i < label_1_levels.length; i += 1) {
    label_1_data = assign(label_1_data, label_1_levels[i]);
  }
  let div_levels = [
    {
      class: div_class_value = classMap({
        [ctx[1]]: true,
        "mdc-form-field": true,
        "mdc-form-field--align-end": ctx[2] === "end",
        "mdc-form-field--nowrap": ctx[3]
      })
    },
    exclude(ctx[10], ["label$"])
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      t = space();
      label_1 = element("label");
      if (label_slot)
        label_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      t = claim_space(div_nodes);
      label_1 = claim_element(div_nodes, "LABEL", { for: true });
      var label_1_nodes = children(label_1);
      if (label_slot)
        label_slot.l(label_1_nodes);
      label_1_nodes.forEach(detach_dev);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(label_1, label_1_data);
      add_location(label_1, file, 15, 2, 412);
      set_attributes(div, div_data);
      add_location(div, file, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      append_hydration_dev(div, t);
      append_hydration_dev(div, label_1);
      if (label_slot) {
        label_slot.m(label_1, null);
      }
      ctx[14](label_1);
      ctx[15](div);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(null, label_1, ctx[5])),
          action_destroyer(useActions_action_1 = useActions.call(null, div, ctx[0])),
          action_destroyer(forwardEvents_action = ctx[9].call(null, div)),
          listen_dev(div, "SMUIGenericInput:mount", ctx[16], false, false, false),
          listen_dev(div, "SMUIGenericInput:unmount", ctx[17], false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[12],
            !current ? get_all_dirty_from_scope(ctx2[12]) : get_slot_changes(default_slot_template, ctx2[12], dirty, null),
            null
          );
        }
      }
      if (label_slot) {
        if (label_slot.p && (!current || dirty & 4096)) {
          update_slot_base(
            label_slot,
            label_slot_template,
            ctx2,
            ctx2[12],
            !current ? get_all_dirty_from_scope(ctx2[12]) : get_slot_changes(label_slot_template, ctx2[12], dirty, get_label_slot_changes),
            get_label_slot_context
          );
        }
      }
      set_attributes(label_1, label_1_data = get_spread_update(label_1_levels, [
        (!current || dirty & 16) && { for: ctx2[4] },
        dirty & 1024 && prefixFilter(ctx2[10], "label$")
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & 32)
        useActions_action.update.call(null, ctx2[5]);
      set_attributes(div, div_data = get_spread_update(div_levels, [
        (!current || dirty & 14 && div_class_value !== (div_class_value = classMap({
          [ctx2[1]]: true,
          "mdc-form-field": true,
          "mdc-form-field--align-end": ctx2[2] === "end",
          "mdc-form-field--nowrap": ctx2[3]
        }))) && { class: div_class_value },
        dirty & 1024 && exclude(ctx2[10], ["label$"])
      ]));
      if (useActions_action_1 && is_function(useActions_action_1.update) && dirty & 1)
        useActions_action_1.update.call(null, ctx2[0]);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      transition_in(label_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      transition_out(label_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      if (default_slot)
        default_slot.d(detaching);
      if (label_slot)
        label_slot.d(detaching);
      ctx[14](null);
      ctx[15](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var counter = 0;
function instance_1($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "align", "noWrap", "inputId", "label$use", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("FormField", slots, ["default", "label"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { align = "start" } = $$props;
  let { noWrap = false } = $$props;
  let { inputId = "SMUI-form-field-" + counter++ } = $$props;
  let { label$use = [] } = $$props;
  let element2;
  let instance;
  let label;
  let input;
  setContext("SMUI:generic:input:props", { id: inputId });
  onMount(() => {
    instance = new MDCFormFieldFoundation({
      activateInputRipple: () => {
        if (input) {
          input.activateRipple();
        }
      },
      deactivateInputRipple: () => {
        if (input) {
          input.deactivateRipple();
        }
      },
      deregisterInteractionHandler: (evtType, handler) => {
        label.removeEventListener(evtType, handler);
      },
      registerInteractionHandler: (evtType, handler) => {
        label.addEventListener(evtType, handler);
      }
    });
    instance.init();
    return () => {
      instance.destroy();
    };
  });
  function getElement() {
    return element2;
  }
  function label_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      label = $$value;
      $$invalidate(7, label);
    });
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(6, element2);
    });
  }
  const SMUIGenericInput_mount_handler = (event) => $$invalidate(8, input = event.detail);
  const SMUIGenericInput_unmount_handler = () => $$invalidate(8, input = void 0);
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("align" in $$new_props)
      $$invalidate(2, align = $$new_props.align);
    if ("noWrap" in $$new_props)
      $$invalidate(3, noWrap = $$new_props.noWrap);
    if ("inputId" in $$new_props)
      $$invalidate(4, inputId = $$new_props.inputId);
    if ("label$use" in $$new_props)
      $$invalidate(5, label$use = $$new_props.label$use);
    if ("$$scope" in $$new_props)
      $$invalidate(12, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    counter,
    MDCFormFieldFoundation,
    onMount,
    setContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    exclude,
    prefixFilter,
    useActions,
    forwardEvents,
    use,
    className,
    align,
    noWrap,
    inputId,
    label$use,
    element: element2,
    instance,
    label,
    input,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("align" in $$props)
      $$invalidate(2, align = $$new_props.align);
    if ("noWrap" in $$props)
      $$invalidate(3, noWrap = $$new_props.noWrap);
    if ("inputId" in $$props)
      $$invalidate(4, inputId = $$new_props.inputId);
    if ("label$use" in $$props)
      $$invalidate(5, label$use = $$new_props.label$use);
    if ("element" in $$props)
      $$invalidate(6, element2 = $$new_props.element);
    if ("instance" in $$props)
      instance = $$new_props.instance;
    if ("label" in $$props)
      $$invalidate(7, label = $$new_props.label);
    if ("input" in $$props)
      $$invalidate(8, input = $$new_props.input);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    use,
    className,
    align,
    noWrap,
    inputId,
    label$use,
    element2,
    label,
    input,
    forwardEvents,
    $$restProps,
    getElement,
    $$scope,
    slots,
    label_1_binding,
    div_binding,
    SMUIGenericInput_mount_handler,
    SMUIGenericInput_unmount_handler
  ];
}
var FormField = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance_1, create_fragment, safe_not_equal, {
      use: 0,
      class: 1,
      align: 2,
      noWrap: 3,
      inputId: 4,
      label$use: 5,
      getElement: 11
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "FormField",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get align() {
    throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set align(value) {
    throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get noWrap() {
    throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set noWrap(value) {
    throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputId() {
    throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputId(value) {
    throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label$use() {
    throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label$use(value) {
    throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[11];
  }
  set getElement(value) {
    throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var FormField_default = FormField;

// node_modules/@smui/form-field/dist/index.js
var dist_default = FormField_default;
export {
  dist_default as default
};
//# sourceMappingURL=@smui_form-field.js.map
